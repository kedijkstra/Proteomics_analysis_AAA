{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DifferentiallyAbundantProteins","text":"<p>This class contains functionalities for the identification of  differentially abundant proteins.</p> <p>Attributes:</p> Name Type Description <code>df</code> <code>pandas dataframe</code> <p>Wide format pandas dataframe with quantification and other data.</p> <code>id</code> <code>str</code> <p>String containing the name of the column with the sample identification ID's</p> <code>group</code> <code>str</code> <p>String containing the name of the column with the groupings (ex. healthy/treatment)</p> <code>proteins</code> <code>list</code> <p>List of strings containing the column names of proteins</p> <code>groups</code> <code>list</code> <p>List of unique groups derived from group column</p> <code>log_fold_thres</code> <code>float</code> <p>Threshold for log fold change to be considered an DAP</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.__init__","title":"<code>__init__(dataframe, ID_column, group_column, proteins)</code>","text":"<p>Init function of DifferentiallyAbundantProteins class.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>pandas dataframe</code> <p>Wide format pandas dataframe with quantification and other data.</p> required <code>ID_column</code> <code>str</code> <p>String containing the name of the column with the sample identification ID's</p> required <code>group_column</code> <code>str</code> <p>String containing the name of the column with the groupings (ex. healthy/treatment)</p> required <code>proteins</code> <code>list</code> <p>List of strings containing the column names of proteins</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.auc","title":"<code>auc(y_test, predictions)</code>","text":"<p>This function calculates the AUC of the ROC</p> <p>Parameters:</p> Name Type Description Default <code>y_test</code> <code>list</code> <p>Contains testing class labels</p> required <code>Predictions</code> <code>list</code> <p>List with class predictions</p> required <p>Returns:</p> Type Description <code>auc score : float</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.average_quant","title":"<code>average_quant(method='mean', proteins=False, na_zero=False)</code>","text":"<p>This function determines the average amount of protein quantified.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Method of determining average {mean, median} (default = mean)</p> <code>'mean'</code> <code>na_zero</code> <code>boolean</code> <p>include missing values as 0 (default = False)</p> <code>False</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>results</code> <code>pandas dataframe </code> <p>pandas dataframe containing protein and average quantification</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.avg_filtering","title":"<code>avg_filtering(threshold, proteins=False, method='mean', na_zero=False)</code>","text":"<p>This function determines the average amount of protein quantified and filters the dataset on an arbitrary threshold thereof.</p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>integer/float which serves as the cut-off value for proteins to delete</p> required <code>method</code> <code>str</code> <p>Method of determining average {mean, median} (default = mean)</p> <code>'mean'</code> <code>na_zero</code> <code>boolean</code> <p>include missing values as 0 (default = False)</p> <code>False</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> DEPENDENCIES <p>function : average_quant</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.avg_imputation","title":"<code>avg_imputation(proteins=False)</code>","text":"<p>This function imputes non-existing values with the protein average.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.color_map","title":"<code>color_map()</code>","text":"<p>This function creates a dictionary with colors  alternating between two colors based on the groups.</p> <p>Returns:</p> Name Type Description <code>color_mapping</code> <code>dictionary</code> <p>group as key and color as value</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.cyclic_loess","title":"<code>cyclic_loess(n_iter=3, proteins=False)</code>","text":"<p>This function performes a cyclic lowes based on a reference set containing median values.</p> <p>Parameters:</p> Name Type Description Default <code>n_iter</code> <code>int</code> <p>indicates the number of iterations (default = 3)</p> <code>3</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.density_plot","title":"<code>density_plot(proteins=False)</code>","text":"<p>This function creates a density plot. </p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.distance_heatmap","title":"<code>distance_heatmap(method='euclidean', control_group=False, treatment_group=False, proteins=False)</code>","text":"<p>This function creates heatmap based on a distance matrix.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>distance metric to use {euclidean, manhattan, poisson} (default = euclidean)</p> <code>'euclidean'</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> DEPENDENCIES <p>function : euclidian_distance_matrix function : manhattan_distance_matrix function : poisson_distance_matrix</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.euclidian_distance_matrix","title":"<code>euclidian_distance_matrix(proteins=False)</code>","text":"<p>This function creates a distance matrix for all protein  values based on the euclidean distance metric.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>distances</code> <code>matrix</code> <p>euclidean distance matrix</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.exponentiate","title":"<code>exponentiate(base='2', proteins=False)</code>","text":"<p>This function exponentiates data from selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.fold_change","title":"<code>fold_change(control_group, treatment_group, proteins=False, logged=True, log=False)</code>","text":"<p>This function calculates the fold change value for selected proteins. Only executable with n group = 2.</p> <p>Parameters:</p> Name Type Description Default <code>logged</code> <code>boolean</code> <p>indicates if data is log transformed</p> <code>True</code> <code>log</code> <code>boolean</code> <p>indicates if fold changes need to be log transformend</p> <code>False</code> <code>control_group</code> <code>str</code> <p>group name of controls</p> required <code>treatment_group</code> <code>str</code> <p>group name of treatment</p> required <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>fold_change</code> <code>nested dictionary </code> <p>proteins and their fold change for all proteins</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.get_data","title":"<code>get_data()</code>","text":"<p>Retrieve the data</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.get_group","title":"<code>get_group()</code>","text":"<p>Retrieve the group column identifier</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.get_groups","title":"<code>get_groups()</code>","text":"<p>Retrieve the unique groups</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.get_id","title":"<code>get_id()</code>","text":"<p>Retrieve the sample id column identifier</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.get_log_fold_thres","title":"<code>get_log_fold_thres()</code>","text":"<p>Retrieve the log fold change threshold</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.get_proteins","title":"<code>get_proteins()</code>","text":"<p>Retrieve list of proteins</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.grid_pipeline","title":"<code>grid_pipeline(imp_methods, norm_methods, thresholds, control_group, treatment_group, log_transform=[True], log_transformend=False, volcanoplot=False, test='mw', laplace_values=[1], nn_knn=[4], orders=['lin'], n_iter=1, multiple_correction='bh', confounders=[], mrf_n_iters=[2], modeling=False)</code>","text":"<p>This function runs an grid for specified settings for the entire pipeline for DAP identification</p> Parameters: <p>imp_methods : list     imputation methods {knn, avg, laplace, mrf} norm_methods : list     normalization methods {median, cloess, quantile, ti, vsn, linear, ma_linear, mrn, skl} thresholds : list     cut-offs of missing value percentage  log_transform : list     booleans indicating if data needs to be log transformend (default = [True]) control_group : str     contains group name of controls treatment_group : str     contains group name of treatment log_transformend : boolean     indicates if data is already log transformend (default = False) volcanoplot : boolean     indicates if a volcano plot should be constructed (default = False) test : str     statistical test to be used {mw, lin, tt, anova} (default = mw) laplace_value : numeric     value to use in laplace estimator (default = 1) order : str         order in which (l)og-transformation, (i)mputation and (n)ormalization should be done,         any combination of [i, l, n] (default = lin) n_iter : int     indicates the number of iterations relevant imputation method (default = 1) multiple_correction : str     multiple correction method to use {bh, bonn, \"\"} (default = bh) confounders : list     column names to use as confounders in linear model (default = []) mrf_n_iters : list     number of iterations of the miss random forest imputation technique (default = [2]) nn_knn : list     number of neighbours for the knn imputation method (default = [4])</p> Returns: <p>results : dataframe     contains boolean values indicating if proteins are identified as DAP and columns for settings</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.knn_imputation","title":"<code>knn_imputation(n_neighbors=10, proteins=False)</code>","text":"<p>This function imputes non-existing values with the a value determined  by a K-NN imputer.</p> <p>Parameters:</p> Name Type Description Default <code>n_neighbors</code> <code>int</code> <p>number of neightbors to train the k-nn imputer on</p> <code>10</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.laplace","title":"<code>laplace(value=1, proteins=False)</code>","text":"<p>This function replaces non-existing values with a given value for  selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>value to replace nan's with (default = 1)</p> <code>1</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.linear_calc","title":"<code>linear_calc(x, slope, intercept)</code>","text":"<p>This function calculates a prediction using a linear model</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>numeric</code> <p>x value</p> required <code>slope</code> <code>numeric</code> <p>value of the slope of the linear model</p> required <code>intercept</code> <code> numeric </code> <p>value of the intercept of the linear model</p> required <p>Returns:</p> Name Type Description <code>y</code> <code>numeric</code> <p>predicted value</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.linear_model","title":"<code>linear_model(confounders=False, proteins=False, sign_only=False, alpha=0.05, multiple_correction='bh')</code>","text":"<p>This function constructs a linear model for each protein based on the groups and choosen confounders.</p> <p>Parameters:</p> Name Type Description Default <code>confounders</code> <code>list</code> <p>contains column names which are used as confounders</p> <code>False</code> <code>multiple_correction</code> <code>str</code> <p>{bh (Benjamini/Hochberg), bon (bonferroni)} (default = bh)</p> <code>'bh'</code> <code>sign_only</code> <code>boolean</code> <p>only return significant values (default = False)</p> <code>False</code> <code>alpha</code> <code>float</code> <p>threshold for significance (default = 0.05)</p> <code>0.05</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>pvals</code> <code>dictionary</code> <p>proteins as key and pvalue as value</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.linear_regression_normalization","title":"<code>linear_regression_normalization(diag_plot=False, proteins=False)</code>","text":"<p>This function performens linear regression normalization on selected proteins</p> <p>Parameters:</p> Name Type Description Default <code>diag_plot</code> <code>boolean</code> <p>indicates if diagnostic plot should be constructed (default = false)</p> <code>False</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.loess","title":"<code>loess(m, a)</code>","text":"<p>This function performs the statmodels loess function with: * frac = 0.7 * return_sorted = False</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>list</code> <p>endog argument</p> required <code>a</code> <code>list</code> <p>exog argument</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.log_transform","title":"<code>log_transform(proteins=False)</code>","text":"<p>This function log-transforms data from selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.logistic_regression","title":"<code>logistic_regression(x_train, y_train, multiclass=False)</code>","text":"<p>This function creates a logistic regression model</p> <p>Parameters:</p> Name Type Description Default <code>x_train</code> <code>pandas dataframe object</code> <p>Data on which the model should be trained</p> required <code>y_train</code> <code>array</code> <p>List containing class labels</p> required <code>multiclass</code> <code>int</code> <p>Binary indicating whether it involves a multiclass problem</p> <code>False</code> <p>Returns:</p> Name Type Description <code>logisticRegr</code> <code>sklearn LogisticRegression object</code> <p>Logistic resgression model</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.loocv","title":"<code>loocv(modeltype='LR', pca=False, smote=False, proteins=False)</code>","text":"<p>This function creates a machine-learning model and evaluates it using LOOCV</p> Parameters: <p>modeltype : str     machine learning model to use {LR, RF, NB, SVM} (default = LR) pca : boolean     indicates if data needs to be PCA transformend (default = false) smote : boolean     indicates if synthetic data upsampling using the SMOTE technique      should be performend (default = False) proteins : list      list of proteins to use (default = self.proteins)</p> Notes <ul> <li>PCA transformation uses the first 2 dimensions</li> </ul>"},{"location":"#DAP.DifferentiallyAbundantProteins.ma_linear_regression_normalization","title":"<code>ma_linear_regression_normalization(n_iter=3, proteins=False)</code>","text":"<p>This function performens ma linear regression normalization on selected proteins in a cyclical manner</p> <p>Parameters:</p> Name Type Description Default <code>n_iter</code> <code>int</code> <p>indicates the number of iterations (default = 3)</p> <code>3</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.ma_transform","title":"<code>ma_transform(x, y, log_transformed=True)</code>","text":"<p>Calculate M (log ratio) and A (mean average) for paired data.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>list</code> <p>list of numeric data</p> required <code>y</code> <code>list</code> <p>list of numeric data (paired data in order with respect to y)</p> required <code>log_transformend</code> <code>boolean</code> <p>indicates if data has already been log transformend</p> required Returns: <p>m : list     list of log ratio's a : list     list of mean averages</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.manhattan_distance_matrix","title":"<code>manhattan_distance_matrix(proteins=False)</code>","text":"<p>This function creates a distance matrix for all protein  values based on the manhattan distance metric.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>distances</code> <code>matrix</code> <p>manhattan distance matrix</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.maximum_likelihood","title":"<code>maximum_likelihood(cutoff, proteins=False)</code>","text":"<p>Estimates the parameters (mean and standard deviation) of a normal distribution  for each specified protein using maximum likelihood estimation (MLE), based on  observed values in the object's dataframe.</p> Parameters: <p>cutoff : float      threshold value used in the likelihood calculation proteins : list      list of proteins to use (default = self.proteins)</p> Returns: <p>means : list     list of the estimated means of the normal distributions for each protein. sds : list     list of the estimated standard deviations of the normal distributions for each protein.</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.mean_median_plot","title":"<code>mean_median_plot()</code>","text":"<p>This function plots the means and medians of protein intensity values</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.median_normalize","title":"<code>median_normalize(proteins=False)</code>","text":"<p>This function median normalizes selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.median_ratio_normalization","title":"<code>median_ratio_normalization(proteins=False)</code>","text":"<p>This function corrects the data using median-ratio normalization.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.miss_forest_imputation","title":"<code>miss_forest_imputation(n_iter, proteins=False)</code>","text":"<p>This function performs miss random forest imputation</p> <p>Parameters:</p> Name Type Description Default <code>n_iter</code> <code>int</code> <p>number of iterations</p> required <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.missing","title":"<code>missing(proteins=False, percentage=False)</code>","text":"<p>This function determines the amount of missing data per protein.</p> <p>Parameters:</p> Name Type Description Default <code>percentage</code> <code>boolean</code> <p>if true return missing value as percentage of total else absolute number (default = False)</p> <code>False</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>results</code> <code>pandas dataframe </code> <p>pandas dataframe  containing protein and missing count columns</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.missing_abundance_pearson","title":"<code>missing_abundance_pearson(proteins=False)</code>","text":"<p>This function calculates the pearson correlations between missing and protein abundance.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>pearson</code> <code>scipy.stats pearsonr object</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.missing_abundance_plot","title":"<code>missing_abundance_plot(method='total', proteins=False)</code>","text":"<p>This function creates a scatter plot of missing values and abundance. Includes a regression line as well.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>{total, mean, median, min} (default = total)</p> <code>'total'</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.missing_filtering","title":"<code>missing_filtering(threshold, proteins=False, percentage=False)</code>","text":"<p>This function determines the amount of missing data per protein and filters the dataset on an arbitrary threshold thereof. This only alters the list of proteins.</p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>integer/float which serves as the cut-off value for proteins to delete</p> required <code>percentage</code> <code>boolean</code> <p>if true return interpret threshold as percentage of total else absolute number (default = False)</p> <code>False</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.model_predict","title":"<code>model_predict(model, x_test, multiclass=False)</code>","text":"<p>This function handles predictions using a given model</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>sklearn model object</code> required <code>x_test</code> <code>pandas dataframe object</code> <p>Data with whom the model should be tested</p> required <code>multiclass</code> <code>int</code> <p>Binary indicating whether it involves a multiclass problem</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Predictions</code> <code>array</code> <p>List with class predictions</p> <code>Predictions_prob</code> <code>array</code> <p>List with probabilities of the predictions</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.multi_dimensional_scaling","title":"<code>multi_dimensional_scaling(distance_matrix)</code>","text":"<p>This function creates a multi dimensional scaling embedding based on a distance matrix, computes 2 components. </p> <p>Parameters:</p> Name Type Description Default <code>distance_matrix</code> <code>matrix</code> <p>a distance matrix</p> required <p>Returns:</p> Name Type Description <code>embedding</code> <code>MDS object </code> <p>fit-transformed by distance matrix.</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.multi_dimensional_scaling_plot","title":"<code>multi_dimensional_scaling_plot(distance_matrix)</code>","text":"<p>This function creates a multi dimensional scaling plot based on a distance matrix. Supports up to two groups.</p> <p>Parameters:</p> Name Type Description Default <code>distance_matrix</code> <code>matrix</code> required DEPENDENCIES <p>function : color_map</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.multiple_protein_aucroc","title":"<code>multiple_protein_aucroc(treatment_group, control_group, modeltype='LR', pca=False, proteins=False, smote=False)</code>","text":"<p>Contructs a classifier based on selected proteins</p> <p>Parameters:</p> Name Type Description Default <code>control_group</code> <code>str</code> <p>contains group name of controls</p> required <code>treatment_group</code> <code>str</code> <p>contains group name of treatment</p> required <code>modeltype</code> <code>str</code> <p>machine learning model to use {LR, RF, NB, SVM} (default = LR)</p> <code>'LR'</code> <code>pca</code> <code>boolean</code> <p>indicates if data needs to be PCA transformend (default = false)</p> <code>False</code> <code>smote</code> <code>boolean</code> <p>indicates if synthetic data upsampling using the SMOTE technique  should be performend (default = False)</p> <code>False</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.multiple_single_protein_aucroc","title":"<code>multiple_single_protein_aucroc(treatment_group, control_group, modeltype='LR', proteins=False, smote=False)</code>","text":"<p>This function makes a classifier for each individual protein</p> <p>Parameters:</p> Name Type Description Default <code>control_group</code> <code>str</code> <p>contains group name of controls</p> required <code>treatment_group</code> <code>str</code> <p>contains group name of treatment</p> required <code>modeltype</code> <code>str</code> <p>machine learning model to use {LR, RF, NB, SVM} (default = LR)</p> <code>'LR'</code> <code>pca</code> <code>boolean</code> <p>indicates if data needs to be PCA transformend (default = false)</p> required <code>smote</code> <code>boolean</code> <p>indicates if synthetic data upsampling using the SMOTE technique  should be performend (default = False)</p> <code>False</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.naive_bayes","title":"<code>naive_bayes(x_train, y_train)</code>","text":"<p>This function creates a na\u00edve bayes model</p> <p>Parameters:</p> Name Type Description Default <code>x_train</code> <code>pandas dataframe object</code> <p>Data on which the model should be trained</p> required <code>y_train</code> <code>array</code> <p>List containing class labels</p> required <p>Returns:</p> Name Type Description <code>model</code> <code>sklearn Guassian na\u00efve bayes object</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.nan_to_zero","title":"<code>nan_to_zero(proteins=False)</code>","text":"<p>This function replaces non-existing values with zero's for  selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.neg_log_likelihood","title":"<code>neg_log_likelihood(params, cutoff, obs_vals)</code>","text":"<p>This function computes the negative log-likelihood for a censored normal distribution model  given observed data, a cutoff value, and distribution parameters.</p> Parameters: <p>params : list or tuple of float     A sequence containing two values: the mean and standard deviation of the      normal distribution [mean, sd]. cutoff : float     The censoring threshold. Values below this are considered censored in the      likelihood calculation. obs_vals : list of float     The list of observed (non-censored) values.</p> Returns: <p>float     The negative log-likelihood value. Returns infinity if the standard deviation      is not positive.</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.normalize_row","title":"<code>normalize_row(row)</code>","text":"<p>Helper function of the skl_normalize fucntion, performs normalization for a given row.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>integer indicating the row position</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.obsmean_calcmean_plot","title":"<code>obsmean_calcmean_plot(cutoff, threshold)</code>","text":"<p>This function plots the observed means and calculated means by MLE of protein intensity values</p> <p>Parameters:</p> Name Type Description Default <code>cutoff</code> <code>int</code> <p>cut-off of maximum likelihood</p> required <code>threshold</code> <code>int</code> <p>Threshold for the calculated mean</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.pca","title":"<code>pca(proteins=False)</code>","text":"<p>This function calculates the principal components of  given proteins. Before running, it is recommended to log transform and normalize the data.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>pca_res_f</code> <code>PCA object</code> <p>fitted sklearn PCA object</p> <code>pca_res_ft</code> <code>dataframe</code> <p>fit-transformed sklearn PCA results with number of components = 2</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.pca_plot","title":"<code>pca_plot(proteins=False)</code>","text":"<p>This function creates a scatter plot of the first two pricipal components.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> DEPENDENCIES <p>function : pca</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.pearson_correlation","title":"<code>pearson_correlation(proteins=False)</code>","text":"<p>This function calculates the pearson correlations for  given proteins from different samples.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>pc</code> <code>dataframe</code> <p>contains pearson correlation values</p> <code>pc_pvals</code> <code>dataframe</code> <p>contains p-values from correlation</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.pipeline","title":"<code>pipeline(imp_method, norm_method, threshold, log_transform, control_group, treatment_group, log_transformend=False, volcanoplot=False, test='mw', laplace_value=1, nn_knn=4, order='lin', n_iter=1, multiple_correction='bh', confounders=[], mrf_n_iter=2, modeling=False, modeltype='LR')</code>","text":"<p>This function runs an entire pipeline for DAP identification</p> Parameters: <p>imp_method : str     imputation method {knn, avg, laplace, mrf} norm_method : str     normalization method {median, cloess, quantile, ti, vsn, linear, ma_linear, mrn, skl} threshold : int     cut-off of missing value percentage  log_transform : boolean     indicates if data needs to be log transformend control_group : str     contains group name of controls treatment_group : str     contains group name of treatment log_transformend : boolean     indicates if data is already log transformend (default = False) volcanoplot : boolean     indicates if a volcano plot should be constructed (default = False) test : str     statistical test to be used {mw, lin, tt, anova} (default = mw) laplace_value : numeric     value to use in laplace imputation (default = 1) order : str     order in which (l)og-transformation, (i)mputation and (n)ormalization should be done,     any combination of [i, l, n] (default = lin) n_iter : int      indicates the number of iterations relevant imputation method (default = 1) multiple_correction : str      multiple correction method to use {bh, bonn, \"\"} (default = bh) confounders : list      column names to use as confounders in linear model (default = []) mrf_n_iters : int     number of iterations of the miss random forest imputation technique (default = 2) nn_knn : int     number of neighbours for the knn imputation method (default = 4) modeling : boolean     indicates if a LR model should be constructed (uses LOOCV) and evaluated (default = False)</p> Returns: <p>dap : dictionary      DAP's names as key and list with p-value and log-fold change as value string : str     representation of methods</p> Notes: <ul> <li>supplied log transformend data will always be exponentiated </li> <li>current object should hold correct list of proteins</li> <li>log trans-formation is ignored if set to False in order</li> <li>imputation comes before DAP identification and modeling, use with care!</li> </ul>"},{"location":"#DAP.DifferentiallyAbundantProteins.pipeline_imputation","title":"<code>pipeline_imputation(imp_method, nn_knn, laplace_value, mrf_n_iter)</code>","text":"<p>Helper function for the pipeline method, executes the imputation method</p> Parameters: <p>imp_method : str     imputation method {knn, avg, laplace, mrf} laplace_value : numeric     value to use in laplace imputation (default = 1) nn_knn : int     number of neighbours for the knn imputation method mrf_n_iter : int     number of iterations of the miss random forest imputation technique</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.pipeline_log_transform","title":"<code>pipeline_log_transform(log_transform)</code>","text":"<p>Helper function for the pipeline method, executes the log-transformation method</p> Parameters: <p>log_transform : boolean     indicates if data needs to be log transformend</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.pipeline_normalization","title":"<code>pipeline_normalization(norm_method, n_iter)</code>","text":"<p>Helper function for the pipeline method, executes the normalization method</p> Parameters: <p>norm_method : str     normalization method {median, cloess, quantile, ti, vsn, linear, ma_linear, mrn, skl} n_iter : int      indicates the number of iterations relevant imputation method</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.pipeline_test","title":"<code>pipeline_test(test, multiple_correction, confounders)</code>","text":"<p>Helper function for the pipeline method, executes the statistical test</p> Parameters: <p>test : str     statistical test to be used {mw, lin, tt, anova} multiple_correction : str     multiple correction method to use {bh, bonn, \"\"} confounders : list     column names to use as confounders in linear model (default = [])</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.poisson_distance_matrix","title":"<code>poisson_distance_matrix(proteins=False)</code>","text":"<p>This function creates a distance matrix for all protein  values based on the poisson distance metric.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>distances</code> <code>matrix</code> <p>poisson distance matrix</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.protein_batch_anova","title":"<code>protein_batch_anova(multiple_correction='bh', sign_only=False, alpha=0.05, proteins=False)</code>","text":"<p>This function calculates a t-test for selected proteins based on the current groups. Only executable with n group = 2.</p> <p>Parameters:</p> Name Type Description Default <code>multiple_correction</code> <code>str</code> <p>{bh (Benjamini/Hochberg), bon (bonferroni)} (default = bh)</p> <code>'bh'</code> <code>sign_only</code> <code>boolean</code> <p>only return significant values (default = False)</p> <code>False</code> <code>alpha</code> <code>float</code> <p>threshold for significance (default = 0.05)</p> <code>0.05</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>pvals</code> <code>dictionary</code> <p>proteins as key and pvalue as value</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.protein_batch_mann_whitney_u","title":"<code>protein_batch_mann_whitney_u(proteins=False, sign_only=False, alpha=0.05, multiple_correction='bh')</code>","text":"<p>This function conducts a mann whitney u test for selected proteins based on the current groups. Only executable with n group = 2.</p> <p>Parameters:</p> Name Type Description Default <code>multiple_correction</code> <code>str</code> <p>{bh (Benjamini/Hochberg), bon (bonferroni)} (default = bh)</p> <code>'bh'</code> <code>sign_only</code> <code>boolean</code> <p>only return significant values (default = False)</p> <code>False</code> <code>alpha</code> <code>float</code> <p>threshold for significance (default = 0.05)</p> <code>0.05</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>pvals</code> <code>dictionary</code> <p>proteins as key and pvalue as value</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.protein_batch_ttest","title":"<code>protein_batch_ttest(proteins=False, sign_only=False, alpha=0.05, multiple_correction='bh')</code>","text":"<p>This function calculates a t-test for selected proteins based on the current groups. Only executable with n group = 2.</p> <p>Parameters:</p> Name Type Description Default <code>multiple_correction</code> <code>str</code> <p>{bh (Benjamini/Hochberg), bon (bonferroni)} (default = bh)</p> <code>'bh'</code> <code>sign_only</code> <code>boolean</code> <p>only return significant values (default = False)</p> <code>False</code> <code>alpha</code> <code>float</code> <p>threshold for significance (default = 0.05)</p> <code>0.05</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>pvals</code> <code>dictionary</code> <p>proteins as key and pvalue as value</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.protein_correlation_heatmap","title":"<code>protein_correlation_heatmap(proteins=False)</code>","text":"<p>This function creates correlation heatmap based on protein data.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.qq","title":"<code>qq(proteins=False)</code>","text":"<p>This function creates Q-Q plots for selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.quantile_normalization","title":"<code>quantile_normalization(proteins=False)</code>","text":"<p>This function performes quantile normalization for  selected proteins</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.quantile_normalize_group","title":"<code>quantile_normalize_group(proteins=False)</code>","text":"<p>This function performend quantile normalization function for  selected proteins based on groups</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> Notes <ul> <li>Only a number of 2 groups is supported</li> </ul>"},{"location":"#DAP.DifferentiallyAbundantProteins.random_forest","title":"<code>random_forest(x_train, y_train)</code>","text":"<p>This function creates a random forest model</p> <p>Parameters:</p> Name Type Description Default <code>x_train</code> <code>pandas dataframe object</code> <p>Data on which the model should be trained</p> required <code>y_train</code> <code>array</code> <p>List containing class labels</p> required <p>Returns:</p> Name Type Description <code>model</code> <code>sklearn random forest object</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.ranked_missing_plot","title":"<code>ranked_missing_plot(hline=50, proteins=False)</code>","text":"<p>This function creates a ranked missing plot for selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>hline</code> <code>int</code> <p>y value for placement of horizontal line (default = 50)</p> <code>50</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.ranked_quantification_plot","title":"<code>ranked_quantification_plot(proteins=False)</code>","text":"<p>This function creates a ranked quantification plot for selected proteins.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.read_count_barplot","title":"<code>read_count_barplot(method='sum', proteins=False)</code>","text":"<p>This function creates barplot for quantification  of selected proteins. </p> <p>Parameters:</p> Name Type Description Default <code>methods</code> <code>str</code> <p>method for read count {sum, median} (default = sum)</p> required <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> DEPENDENCIES <p>function : color_map</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.read_count_boxplot","title":"<code>read_count_boxplot(n_samples=False, proteins=False, log_transformed=True)</code>","text":"<p>This function creates boxplot for quantification  of selected proteins. </p> <p>Parameters:</p> Name Type Description Default <code>n_samples</code> <code>List</code> <p>contains two indices of samples (min, max)</p> <code>False</code> <code>log_transformed</code> <code>Boolean</code> <p>indicates if data is log-transformed</p> <code>True</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.sample_correlation_heatmap","title":"<code>sample_correlation_heatmap(control_group=False, treatment_group=False, proteins=False)</code>","text":"<p>This function creates correlation heatmap on protein data of samples.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> DEPENDENCIES <p>function : peason_correlation</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.sample_protein_map","title":"<code>sample_protein_map(proteins=False)</code>","text":"<p>This function maps proteins based on the proteins and samples.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Type Description <code>nested dictionary : dictionary </code> <p>proteins as keys and dictionaries with groups and lists of protein quantifications</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.set_data","title":"<code>set_data(data)</code>","text":"<p>Set the data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>pandas dataframe</code> <p>Wide format pandas dataframe with quantification and other data.</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.set_groups","title":"<code>set_groups(group)</code>","text":"<p>Set the group and subsequent groups,  make sure column is present in data.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>String containing the name of the column with the groupings (ex. healthy/treatment)</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.set_id","title":"<code>set_id(id)</code>","text":"<p>Set the id column identifier</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>String containing the name of the column with the sample identification ID's</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.set_log_fold_thres","title":"<code>set_log_fold_thres(lft)</code>","text":"<p>Set the id column identifier</p> <p>Parameters:</p> Name Type Description Default <code>lft</code> <code>float</code> <p>Threshold for log fold change to be considered an DAP</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.set_proteins","title":"<code>set_proteins(proteins)</code>","text":"<p>Set the list of proteins</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>List of strings containing the column names of proteins</p> required"},{"location":"#DAP.DifferentiallyAbundantProteins.shapiro","title":"<code>shapiro(multiple_correction='bh', proteins=False, sign_only=False, alpha=0.05, fdr=True)</code>","text":"<p>This function determines normality for selected proteins using the Shapiro-Wilk test.</p> <p>Parameters:</p> Name Type Description Default <code>multiple_correction</code> <code>str</code> <p>{bh (Benjamini/Hochberg), bon (bonferroni)} (default = bh)</p> <code>'bh'</code> <code>sign_only</code> <code>boolean</code> <p>only return significant values (default = False)</p> <code>False</code> <code>alpha</code> <code>float</code> <p>threshold for significance (default = 0.05)</p> <code>0.05</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>results</code> <code>pandas dataframe </code> <p>contains statistic, p-value, protein and group columns.</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.skl_normalize","title":"<code>skl_normalize(proteins=False)</code>","text":"<p>This function normalizes data of selected proteins using the sklearn nromalization function.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.total_intensity_normalization","title":"<code>total_intensity_normalization(method='mean', proteins=False)</code>","text":"<p>This function corrects the data using total intensity normalization.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Method of determining average {mean, median} (default = mean)</p> <code>'mean'</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.tsne","title":"<code>tsne(distance_matrix, perplexity=30)</code>","text":"<p>This function creates a T-distributed Stochastic Neighbor Embedding based on a given distance matrix. Init is set to random.</p> <p>Parameters:</p> Name Type Description Default <code>distance_matrix</code> <code>matrix</code> <p>a distance matrix</p> required <code>perplexity</code> <code>int</code> <p>must be less than n samples (default = 30)</p> <code>30</code> <p>Returns:</p> Name Type Description <code>embedding</code> <code>TSNE sklearn object </code> <p>fit-transformed by distance matrix.</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.tsne_plot","title":"<code>tsne_plot(distance_matrix, perplexity=30)</code>","text":"<p>This function creates a scatter plot of the t-SNE function.</p> <p>Parameters:</p> Name Type Description Default <code>distance_matrix</code> <code>matrix</code> required <code>perplexity</code> <code>int</code> <p>must be less than n samples (default = 30)</p> <code>30</code> DEPENDENCIES <p>function : tsne</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.umap_2d","title":"<code>umap_2d(proteins=False)</code>","text":"<p>This function creates a Uniform manifold approximation and projection Embedding based on a selected proteins. Init is set to random.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>results</code> <code>umap.umap object </code> <p>fit-transformed by raw data</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.umap_plot","title":"<code>umap_plot(proteins=False)</code>","text":"<p>This function creates a scatter plot of the 2d UMAP function.</p> <p>Parameters:</p> Name Type Description Default <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> DEPENDENCIES <p>function : umap_2d</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.variance_stabilizing_normalization","title":"<code>variance_stabilizing_normalization(tol=1e-06, max_iter=1000, proteins=False)</code>","text":"<p>This function executes the VSN function (from stmball on github)</p> <p>Parameters:</p> Name Type Description Default <code>tol</code> <code>float(optional)</code> <p>Tolerance for gradient descent to stop (default = 1e-6)</p> <code>1e-06</code> <code>max_iter</code> <code>int(optional)</code> <p>Max number of iterations before gradient descent stops. (default = 1000)</p> <code>1000</code>"},{"location":"#DAP.DifferentiallyAbundantProteins.variance_test","title":"<code>variance_test(multiple_correction='bh', method='barlett', proteins=False, sign_only=False, alpha=0.05, fdr=True)</code>","text":"<p>This function determines variance for selected proteins using a barlett or levene test.</p> <p>Parameters:</p> Name Type Description Default <code>multiple_correction</code> <code>str</code> <p>{bh (Benjamini/Hochberg), bon (bonferroni)} (default = bh)</p> <code>'bh'</code> <code>sign_only</code> <code>boolean</code> <p>only return significant values (default = False)</p> <code>False</code> <code>alpha</code> <code>float</code> <p>threshold for significance (default = 0.05)</p> <code>0.05</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>results</code> <code>pandas dataframe</code> <p>contains statistic, p-value and protein columns.</p>"},{"location":"#DAP.DifferentiallyAbundantProteins.volcano_plot","title":"<code>volcano_plot(control_group, treatment_group, lfc=False, pval=False, proteins=False, alpha=0.05)</code>","text":"<p>This function creates volcano plot using log-fold changes and pvalues  of selected proteins. </p> <p>Parameters:</p> Name Type Description Default <code>control_group</code> <code>str</code> <p>contains group name of controls</p> required <code>treatment_group</code> <code>str</code> <p>contains group name of treatment</p> required <code>lfc</code> <code>list</code> <p>contains fold change values</p> <code>False</code> <code>pval</code> <code>list</code> <p>contains p-values</p> <code>False</code> <code>alpha</code> <code>float</code> <p>threshold for significance (default = 0.05)</p> <code>0.05</code> <code>proteins</code> <code>list</code> <p>list of proteins to use (default = self.proteins)</p> <code>False</code> DEPENDENCIES <p>function : protein_batch_ttest function : fold_change</p>"}]}